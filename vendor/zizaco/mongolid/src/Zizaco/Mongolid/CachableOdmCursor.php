<?php namespace Zizaco\Mongolid;

use Iterator;
use MongoCursor;

class CachableOdmCursor implements Iterator
{
    /**
     * The Query that generated this cursor
     *
     * @var array
     */
    protected $query;

    /**
     * Documents returned from query
     *
     * @var array containing instances of model
     */
    protected $documents;

    /**
     * OdmCursor constructor. The query and the
     * model should be provided
     *
     * @param $query Array (The query that "Generated" this cursor )
     * @param $model string
     */
    public function __construct($query, $model)
    {
        $this->query = $query;

        $this->model = $model;

        $this->position = 0;

        $this->documents = $this->getOdmCursor()->toArray(false);
    }

    /**
     * Calls the MongoCursor method if it exists.
     * This makes possible to run methods like limit, skip,
     * orts, and others.
     *
     * @param $name string
     * @param $args array
     *
     * @return mixed
     */
    public function __call($name, $args)
    {
        return call_user_func_array([$this->getOdmCursor(), $name], $args);
    }

    /**
     * Returns the OdmCursor object that are going to be
     * generated by the $this->query
     *
     * @return OdmCursor
     */
    public function getOdmCursor()
    {
        $model = $this->model;

        $OdmCursor = $model::where($this->query);

        if ($this->position > 0) {
            $OdmCursor->skip($this->position);
        }

        return $OdmCursor;
    }

    /**
     * Returns the MongoCursor object
     *
     * @return MongoCursor
     */
    public function getCursor()
    {
        return $this->getOdmCursor()->getCursor();
    }

    /**
     * Iterator interface rewind (used in foreach)
     *
     */
    public function rewind()
    {
        $this->position = 0;
    }

    /**
     * Iterator interface current. Return a model object
     * with cursor document. (used in foreach)
     *
     * @return mixed
     */
    public function current()
    {
        return $this->documents[$this->position];
    }

    /**
     * Convert the cursor instance to an array.
     *
     * @param bool $documentsToArray
     * @param bool $limit
     *
     * @return array
     */
    public function toArray($documentsToArray = true, $limit = false)
    {
        if ($documentsToArray) {
            $result = [];

            foreach ($this as $document) {
                $result[] = $document->getAttributes();
            }
        } else {
            $result = $this->documents;
        }

        return $result;
    }

    /**
     * Returns the first element of the cursor
     *
     * @return mixed|bool
     */
    public function first()
    {
        if (isset($this->documents[0])) {
            return $this->documents[0];
        }

        return false;
    }

    /**
     * Iterator key method (used in foreach)
     *
     */
    public function key()
    {
        return $this->position;
    }

    /**
     * Iterator next method (used in foreach)
     *
     */
    public function next()
    {
        ++$this->position;
    }

    /**
     * Iterator valid method (used in foreach)
     *
     */
    public function valid()
    {
        return isset($this->documents[$this->position]);
    }

    /**
     * @param $fields
     *
     * @return $this
     */
    public function sort($fields)
    {
        return $this->getOdmCursor()->sort($fields);
    }

    /**
     * Retrieve a list of all documents for the given $field, optionally indexed by $key
     *
     * @param string $field
     * @param string $key
     *
     * @return array
     */
    public function lists($field, $key = null)
    {
        $result = [];

        foreach ($this->documents as $document) {
            if ($key) {
                $result[$document->$key] = $document->$field;
            } else {
                $result[] = $document->$field;
            }
        }

        return $result;
    }

    /**
     * Convert the cursor to its string representation.
     *
     * @return string
     */
    public function __toString()
    {
        return $this->toJson();
    }

    /**
     * Convert the cursor to its JSON representation.
     *
     * @param int $options
     *
     * @return string
     */
    public function toJson($options = 0)
    {
        $result = [];

        foreach ($this->documents as $document) {
            $result[] = $document->toJson($options);
        }

        $result = '[' . implode($result, ',') . ']';

        return $result;
    }
}
